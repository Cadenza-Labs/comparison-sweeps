#!/bin/bash

# This script was generated by sweep-script-gen.py

# [Variant(name='prompt indices', flag='--prompt_indices', values=['1', None]), Variant(name='net', flag='--net', values=['ccs', 'eigen']), Variant(name='norm', flag='--norm', values=['burns', 'leace']), Variant(name='per probe prompt', flag='--probe_per_prompt', values=['True', 'False'])]

# --models gpt2 gpt2-medium
# --datasets 'ag_news' 'amazon_polarity' 'dbpedia_14'

i=0
while [[ -e not-133-sweep-out-$i.txt ]] ; do
    let i++
done
filename="not-133-sweep-out-$i.txt"
exec > $filename 2>&1

j=0
while [[ -e commands_status-$j.csv ]] ; do
    let j++
done
csv_file="commands_status-$j.csv"
echo "idx,status,command" > $csv_file
set -e

# cd ../elk
commands=(\
# "elk sweep --models gpt2 gpt2-medium --datasets 'ag_news' 'amazon_polarity' 'dbpedia_14' --binarize --prompt_indices=1 --net=ccs --norm=burns --probe_per_prompt=True --num_gpus 4" \
# "elk sweep --models gpt2 gpt2-medium --datasets 'ag_news' 'amazon_polarity' 'dbpedia_14' --binarize --prompt_indices=1 --net=ccs --norm=burns --probe_per_prompt=False --num_gpus 4" \
# "elk sweep --models gpt2 gpt2-medium --datasets 'ag_news' 'amazon_polarity' 'dbpedia_14' --binarize --prompt_indices=1 --net=ccs --norm=leace --probe_per_prompt=True --num_gpus 4" \
# "elk sweep --models gpt2 gpt2-medium --datasets 'ag_news' 'amazon_polarity' 'dbpedia_14' --binarize --prompt_indices=1 --net=ccs --norm=leace --probe_per_prompt=False --num_gpus 4" \
# "elk sweep --models gpt2 gpt2-medium --datasets 'ag_news' 'amazon_polarity' 'dbpedia_14' --binarize --prompt_indices=1 --net=eigen --probe_per_prompt=True --num_gpus 4" \
# "elk sweep --models gpt2 gpt2-medium --datasets 'ag_news' 'amazon_polarity' 'dbpedia_14' --binarize --prompt_indices=1 --net=eigen --probe_per_prompt=False --num_gpus 4" \
# "elk sweep --models gpt2 gpt2-medium --datasets 'ag_news' 'amazon_polarity' 'dbpedia_14' --binarize --net=ccs --norm=burns --probe_per_prompt=True --num_gpus 4" \
"elk sweep --models gpt2 gpt2-medium --datasets 'ag_news' 'amazon_polarity' 'dbpedia_14' --binarize --net=ccs --norm=burns --probe_per_prompt=False --num_gpus 4" \
"elk sweep --models gpt2 gpt2-medium --datasets 'ag_news' 'amazon_polarity' 'dbpedia_14' --binarize --net=ccs --norm=leace --probe_per_prompt=True --num_gpus 4" \
"elk sweep --models gpt2 gpt2-medium --datasets 'ag_news' 'amazon_polarity' 'dbpedia_14' --binarize --net=ccs --norm=leace --probe_per_prompt=False --num_gpus 4" \
"elk sweep --models gpt2 gpt2-medium --datasets 'ag_news' 'amazon_polarity' 'dbpedia_14' --binarize --net=eigen --probe_per_prompt=True --num_gpus 4" \
"elk sweep --models gpt2 gpt2-medium --datasets 'ag_news' 'amazon_polarity' 'dbpedia_14' --binarize --net=eigen --probe_per_prompt=False --num_gpus 4" \
)


idx=0
for command in "${commands[@]}"; do
    echo "$idx,NOT STARTED,$command" >> $csv_file
    ((idx=idx+1))
done

len=${#commands[@]}
for ((idx=0;idx<len;idx++)); do
    command=${commands[$idx]}
    sed -i "/^$idx,/ s/NOT STARTED/RUNNING/" $csv_file
    echo "Running command: $command"
    curl -d "Sweep [$idx]: $command" ntfy.sh/derpy
    if ! eval "$command"; then
        sed -i "/^$idx,/ s/RUNNING/ERROR/" $csv_file
        echo "Error occurred: Failed to execute command: $command"
        curl -d "Error occurred: Failed to execute command: $command" ntfy.sh/derpy
        break
    else
        sed -i "/^$idx,/ s/RUNNING/DONE/" $csv_file
        echo "Command completed successfully: $command"
        curl -d "Command completed successfully: $command" ntfy.sh/derpy
    fi
done
echo 'All combinations completed.'
